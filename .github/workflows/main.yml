name: CI/CD for Android App

on:
  push:
    branches:
      - main  # Trigger only on pushes to main branch
  pull_request:
    branches:
      - main  # Trigger on PRs to main branch

jobs:
  build:
    name: Build Android APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Grant execute permission to Gradle
        run: chmod +x ./gradlew

      - name: Build APK
        run: ./gradlew assembleRelease

      - name: Upload APK artifact
        uses: actions/upload-artifact@v3
        with:
          name: app-release-apk
          path: app/build/outputs/apk/release/app-release.apk

  deploy:
    name: Deploy to Firebase & Play Store
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download APK artifact
        uses: actions/download-artifact@v3
        with:
          name: app-release-apk
          path: build/app/outputs/flutter-apk/

      - name: Install Firebase CLI
        run: |
          curl -sL https://firebase.tools | bash
          echo "$HOME/.firebase/bin" >> $GITHUB_PATH

      - name: Set up Firebase Authentication
        run: echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}' > firebase-service-account.json

      - name: Export Google Cloud Credentials
        run: echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/firebase-service-account.json" >> $GITHUB_ENV

      - name: Verify Firebase Authentication (Debugging)
        run: ls -la && cat $GOOGLE_APPLICATION_CREDENTIALS || echo "File not found"

      - name: Deploy Android APK to Firebase App Distribution
        run: |
          firebase appdistribution:distribute build/app/outputs/flutter-apk/app-release.apk \
          --app ${{ secrets.FIREBASE_APP_ID }} \
          --groups "testers"

      - name: Setup Fastlane JSON Key
        run: echo '${{ secrets.FASTLANE_ANDROID_JSON_KEY }}' > fastlane-secret.json

      - name: Deploy to Google Play Store using Fastlane
        run: |
          gem install fastlane
          fastlane android beta --json_key fastlane-secret.json
